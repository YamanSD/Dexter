<!DOCTYPE html>
<html data-bs-theme="dark" lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="Free and open-source online code editor that allows you to write and execute code from a rich set of languages.">
    <meta name="keywords" content="online editor, online code editor, online ide, online compiler, online interpreter, run code online, learn programming online,
            online debugger, programming in browser , online code runner, online code execution, debug online, debug C code online, debug C++ code online,
            programming online, snippet, snippets, code snippet, code snippets, pastebin, execute code, programming in browser, run c online, run C++ online,
            run java online, run python online, run ruby online, run c# online, run rust online, run pascal online, run basic online">
    <meta name="author" content="mysd">
    <meta property="og:title" content="Dexter - online compiler based on Docker">
    <meta property="og:description" content="Free and open-source online code editor that allows you to write and execute code from a rich set of languages.">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/split.js/1.6.0/split.min.js"></script>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-confirm/3.3.2/jquery-confirm.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-confirm/3.3.2/jquery-confirm.min.js"></script>

    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.7/css/jquery.dataTables.css" />

    <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.js"></script>
    <link href="https://fonts.googleapis.com/css?family=Exo+2" rel="stylesheet">
    <script src="https://unpkg.com/monaco-editor@latest/min/vs/loader.js"></script>

    <title>Dexter - Docker</title>
    <link rel="shortcut icon" href="../favicon.svg" type="image/svg">
    <link rel="icon" href="../favicon.svg" type="image/svg">

    <!-- Linked by express, ignore warning -->
    <link rel="stylesheet" href="../css/style.css" type="text/css">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.js"></script>

    <script>
        let isAdmin = false;
        let isSuper = false;

        fetch("/api/users/userData", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': localStorage.getItem("token")
            }
        }).then(r => {
            r.json()
                .then(
                    info => {
                        isAdmin = info.user.is_admin;
                        isSuper = info.user.is_super;

                        if (!isSuper) {
                            window.location.href = "/";
                        }
                    });
        }).catch();
    </script>
</head>
<body class="container-fluid bg-black p-0">
<div class="confirm vw-100"></div>

<!-- Error toast -->
<div class="toast err-toast text-primary" role="alert" style="z-index: 1000">
    <div class="toast-header justify-content-between">
        <div class="d-flex flex-row">
            <i class="bi bi-info-circle text-primary"></i>
            <strong class="ms-2 text-primary">Info</strong>
        </div>
        <button type="button"
                class="ml-2 mb-1 close"
                data-dismiss="toast"
                aria-label="Close"
                style="border-radius: 5px;"
                onclick="hideToast()"
        >
            <span class="fw-bold" aria-hidden="true">X</span>
        </button>
    </div>
    <div id="err_toast_msg" class="toast-body">
        Server error
    </div>
</div>

<!-- Navbar -->
<nav class="navbar bg-black w-100 text-white"
     style="position: fixed; min-height: 55px; z-index: 100; border-bottom: 1px solid var(--primary-2);"
>
    <!-- Static controls -->
    <div class="container-fluid text-white">
        <!-- Go back -->
        <button class="navbar-toggler text-white"
                type="button"
                data-bs-toggle="collapse"
                data-bs-target="#navbarNavAltMarkup"
                aria-controls="navbarNavAltMarkup"
                aria-expanded="false"
                onclick="window.history.go(-1);"
                aria-label="Toggle navigation">
            <span class="bi-chevron-left" style="font-size: 25px;"></span>
        </button>
        <div class="flex-row d-flex align-items-center w-75">
            <div id="img-cont">
                <select class="ui dropdown search"
                        id="img-select"
                        aria-label="Image selection"
                >
                    <option value="">Version</option>
                    <% for (const image of images) {%>
                        <option value="<%= image.image_version %>" ><%= image.image_version %></option>
                    <%}%>
                </select>
            </div>
            <div style="width: 10px;"></div>
            <div id="lang-cont">
                <select class="ui dropdown search multiple disabled"
                        id="lang-select"
                        multiple=""
                        aria-label="Language selection"
                >
                    <option value="">Link languages</option>
                    <% for (const lang of langs) {%>
                        <option value="<%= lang %>"><%= lang %></option>
                    <%}%>
                </select>
            </div>
            <div style="width: 10px;"></div>
            <!-- Add link -->
            <button class="text-white btn btn-primary btn-sm disabled"
                    type="button"
                    id="link-btn"
                    data-bs-toggle="collapse"
                    data-bs-target="#navbarNavAltMarkup"
                    aria-controls="navbarNavAltMarkup"
                    aria-expanded="false"
                    onclick="addLink()"
                    aria-label="Toggle navigation">
                <span class="bi bi-upload" style="font-size: 22px;">
                </span>
            </button>
        </div>
        <!-- Add language -->
        <button class="navbar-toggler text-white"
                type="button"
                data-bs-toggle="collapse"
                data-bs-target="#navbarNavAltMarkup"
                aria-controls="navbarNavAltMarkup"
                aria-expanded="false"
                onclick="addImage()"
                aria-label="Toggle navigation">
                <span class="bi bi-node-plus-fill" style="font-size: 22px;">
                </span>
        </button>
    </div>
</nav>

<div class="w-100 bg-dark p-3 overflow-scroll"
     style="top: 55px; border: 3px solid var(--primary-1); color: white; height: calc(100% - 55px); position: absolute;">
    <table id="table"
           class="display"
           style="width: 100%; height: 100%;"></table>
</div>
<script>
    $(".ui.dropdown").dropdown();

    const imageSelectElement = document.getElementById("img-select");
    const langSelectElement = document.getElementById("lang-select");

    imageSelectElement.addEventListener('change', () => {
        const version = $("#img-select").val();
        $(".ui.dropdown").removeClass("disabled");
        $(".btn").removeClass("disabled");

        $(".delete.icon").click();

        $("#lang-select").val(
            data.find((image) => image.image_version.version === version).languages
        ).change();
    });

    function addLink() {
        const version = $("#img-select").val();
        const selectedLanguages = $("#lang-select").val();

        fetch("/api/docker/super/linkLanguages", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': localStorage.getItem("token"),
            },
            body: JSON.stringify({
                version,
                langs: selectedLanguages
            })
        }).then(r => {
            if (r.status === 200) {
                showToast("Link successful!");
                data.find((image) => image.image_version === version).languages = selectedLanguages;
            } else {
                showToast("Link failed!");
            }
        }).catch();
    }

    function showPrompt(func) {
        $.confirm({
            theme: 'supervan',
            title: 'New Docker image',
            content: '' +
                '<form class="form-group">' +
                '<input type="number" min=1 placeholder="Image version" class="version form-control" required />' +
                '<div style="padding-left: 5px; text-align: left;">' +
                '<span style="margin-top: 5px; margin-bottom: 3px;">Dockerfile</span>' +
                '</div>' +
                `<textarea id="duck" oninput="window.duck = event.target.value" style="width: 100%; height: 50vh;">${window.duck ?? "FROM online_compiler:"}</textarea>` +
                '</form>',
            buttons: {
                formSubmit: {
                    text: 'Confirm',
                    btnClass: 'btn-blue',
                    action: async function () {
                        let version = this.$content.find('.version').val();
                        let content = document.getElementById("duck").value;

                        if (!version || !content) {
                            $.alert('Fill values!');
                            return false;
                        }

                        localStorage.setItem("img_cre", "true");

                        $.alert(
                            "<pre style='width: 50vw; white-space: normal'>" +
                            "Image creation started, this may take a long time.\n" +
                            "To get notified on result, remain in the current page</pre>"
                        );

                        fetch("/api/docker/super/createImage", {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': localStorage.getItem("token"),
                            },
                            body: JSON.stringify({
                                version,
                                dockerfile: content
                            })
                        }).then(res => {
                            if (res.status === 200) {
                                window.duck = undefined;
                                showToast("Creation successful! Refresh to see changes");
                                func();
                            } else if (res.status === 400) {
                                $.alert("Image version already in use");
                            } else if (res.status === 401) {
                                $.alert("Unauthorized");
                            } else {
                                $.alert("Invalid Dockerfile");
                            }
                        }).catch();
                    }
                },
                cancel: {
                    text: 'Cancel',
                }
            },
            onContentReady: function () {
                // bind to events
                let jc = this;
                this.$content.find('form').on('submit', function (e) {
                    // if the user submits the form by pressing enter in the field.
                    e.preventDefault();
                    jc.$$formSubmit.trigger('click'); // reference the button and click it
                });
            }
        });
    }

    function showToast(msg) {
        const messageElement = document.getElementById("err_toast_msg");

        messageElement.innerText = msg;

        $(document).ready(function() {
            $(".toast").toast('show');
        });
    }

    function deleteImg(version, inUse) {
        if (inUse) {
            showToast("Image in use cannot delete!");
            return;
        }

        fetch("/api/docker/super/deleteImage", {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': localStorage.getItem("token"),
            },
            body: JSON.stringify({
                version
            })
        }).then(r => {
            if (r.status === 200) {
                showToast("Image deleted! Refresh to see changes");
            } else {
                showToast("Couldn't delete image");
            }
        }).catch();
    }

    function useImg(version, inUse) {
        if (inUse) {
            showToast("Already in use!");
            return;
        }

        fetch("/api/docker/super/setCurrentImage", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': localStorage.getItem("token"),
            },
            body: JSON.stringify({
                version
            })
        }).then(r => {
            if (r.status === 200) {
                showToast(`Success: Image v${version} in use`);
            } else {
                showToast("Couldn't set image");
            }
        }).catch();
    }

    function hideToast() {
        $(document).ready(function() {
            $(".toast").toast('hide');
        });
    }

    function addImage() {
        showPrompt(() => {});
    }

    const data = [];

    <% for (const image of images) {%>
    data.push({
        image_version: {
            version: `<%= image.image_version %>`,
            in_use: `<%= image.in_use %>` === "true",
        },
        createdAt: `<%= image.createdAt.getTime() %>`,
        updatedAt: `<%= image.updatedAt.getTime() %>`,
        dockerfile_content: `<%= image.dockerfile_content %>`,
    });

    data[data.length - 1].languages = [];

    <% for (const lang of image.Languages) {%>
        data[data.length - 1].languages.push(`<%= lang.language_name %>`);
    <%}%>
    <%}%>

    new DataTable('#table', {
        data: data,
        columns: [
            { data: 'image_version', title: 'Version',
                render: (info, type) => {
                    if (type === 'display') {
                        return `<p class="d-flex flex-row justify-content-between align-items-center">
                                  ${info.version}
                                  ${info.in_use ? '<span class="text-primary fw-bold">(in use)</span>' : ""}
                                </p>`;
                    }

                    return parseInt(info.version);
                }
            },
            { data: 'createdAt', title: 'Created on (dd/mm/yyyy)', type: 'numeric',
                render: (date, type) => {
                    if (type !== 'display') {
                        return date;
                    }

                    return new Date(parseInt(date)).toLocaleString('en-GB');
                }
            },
            { data: 'updatedAt', title: 'Last update (dd/mm/yyyy)', type: 'numeric',
                render: (date, type) => {
                    if (type !== 'display') {
                        return date;
                    }

                    return new Date(parseInt(date)).toLocaleString('en-GB');
                }
            },
            { data: 'dockerfile_content', title: 'Dockerfile', orderable: false,
                render: (desc) => {
                    return `<pre>${desc}</pre>`
                }
            },
            { data: 'image_version', searchable: false, orderable: false,
                render: (info) => {
                    return `<button onclick="deleteImg(${info.version}, ${info.in_use})" style="min-width: 3rem;" class="btn btn-danger">Delete</button>`;
                }
            },
            { data: 'image_version', searchable: false, orderable: false,
                render: (info) => {
                    return `<button onclick="useImg(${info.version}, ${info.in_use})" ${info.in_use ? "disabled" : ""} style="min-width: 3rem;" class="btn btn-primary">Use</button>`;
                }
            }
        ],
        processing: true,
        responsive: true
    });
</script>
</body>
</html>
